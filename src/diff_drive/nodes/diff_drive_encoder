#! /usr/bin/env python
from __future__ import division

import rospy
from geometry_msgs.msg import Quaternion
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from std_msgs.msg import Int32
from sensor_msgs.msg import JointState

from geometry_msgs.msg import PoseWithCovarianceStamped
from tf.broadcaster import TransformBroadcaster
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from math import sin, cos
from diff_drive.pose import Pose
from diff_drive import odometry

class EncoderNode:

    def __init__(self):
        self.lwheel_ticks = 0
        self.rwheel_ticks = 0

    def main(self):
        self.lwheel_ticks_pub = rospy.Publisher('lwheel_ticks', Int32, queue_size=10)
        self.rwheel_ticks_pub = rospy.Publisher('rwheel_ticks', Int32, queue_size=10)

        rospy.init_node('diff_drive_encoder')
        self.nodeName = rospy.get_name()
        rospy.loginfo("{0} started".format(self.nodeName))
        rospy.Subscriber("green_robot/sensors/encoders", JointState, self.jsCallback)
        self.rate = float(rospy.get_param('~rate', 10.0))
        rate = rospy.Rate(self.rate)
        while not rospy.is_shutdown():
            self.publish()
            rate.sleep()

    def publish(self):
        d = Int32();
        d.data = self.lwheel_ticks;
        self.lwheel_ticks_pub.publish(d);
        d.data = self.rwheel_ticks;
        self.rwheel_ticks_pub.publish(d);

    def jsCallback(self, msg):
        self.lwheel_ticks = msg.position[0]
        self.rwheel_ticks = msg.position[1]


if __name__ == '__main__':
    try:
        node = EncoderNode()
        node.main()
    except rospy.ROSInterruptException:
        pass
